{"version":3,"sources":["services/priceService.js","services/groupService.js","services/listService.js","services/metaService.js","components/Modal.js","components/PriceTable.js","components/Prices.js","components/FAQ.js","services/loginService.js","components/LoginForm.js","services/userService.js","components/WatchlistTable.js","components/Watchlist.js","components/CollectionTable.js","components/Collection.js","App.js","index.js"],"names":["axios","get","setId","baseUrl","token","setToken","newToken","pushToWatchlist","userId","productId","a","config","headers","Authorization","put","response","data","pushToCollection","deleteFromWatchlist","deleteFromCollection","console","log","increment","decrement","Modal","product","handleClose","showHideClassName","show","className","rowSpan","src","imageUrl","alt","name","group","groupName","cardNumber","cardRarity","currentMarketPrice","href","storeUrl","onClick","PriceTable","user","products","isWatchlist","useState","key","direction","sortConfig","setSortConfig","setShow","selectedProduct","setSelectedProduct","requestSort","AddButtonColumn","listService","id","DeleteButtonColumn","Difference","difference","previousMarketPrice","toFixed","color","PercentDifference","sortedProducts","aValue","bValue","sort","b","comparisonResult","localeCompare","undefined","numeric","sensitivity","compareNumbers","type","map","_id","compare","Prices","prices","setPrices","groups","setGroups","setUser","lastUpdated","setLastUpdated","getAllPricesFromSet","priceService","then","useEffect","loggedUserJSON","window","localStorage","getItem","JSON","parse","groupService","metaService","k","length","align","username","onChange","event","groupId","target","value","document","getElementById","FAQ","login","credentials","post","LoginForm","setUsername","password","setPassword","handleLogin","preventDefault","loginService","setItem","stringify","clear","onSubmit","WatchlistTable","watchlistEntries","sortedWatchlistEntries","class","watchlistEntry","quantity","Watchlist","watchlist","setWatchlist","userService","CollectionTable","collectionEntries","setCollectionEntries","getCollectionEntries","ownedProducts","deleteProduct","IncrementDecrementColumn","DifferenceFormat","PercentDifferenceFormat","sortedCollectionEntries","aProduct","bProduct","totals","netChange","totalPrice","totalPreviousPrice","currentProduct","currentQuantity","percentageChange","calculateTotals","colspan","collectionEntry","Collection","setOwnedProducts","App","to","path","component","exact","ReactDOM","render","StrictMode"],"mappings":"4PAce,EAXA,WACb,OAAOA,IAAMC,IAHC,cAaD,EAPO,SAACC,GACrB,OAAOF,IAAMC,IAAIE,mBAAsBD,ICD1B,EAJA,WACb,OAAOF,IAAMC,IAHC,Y,uBCGZG,EAAQ,KA8DG,GACXC,SA7Da,SAAAC,GACbF,EAAK,iBAAaE,IA6DlBC,gBA1DiB,uCAAG,WAAMC,EAAQC,GAAd,iBAAAC,EAAA,6DACdC,EAAS,CACXC,QAAS,CAACC,cAAeT,IAFT,SAKGJ,IAAMc,IAAIX,oBAA0BM,EAAUA,UAAWA,EAAUA,UAAWE,GALjF,cAKdI,EALc,yBAMbA,EAASC,MANI,2CAAH,wDA2DjBC,iBAlDkB,uCAAG,WAAMT,EAAQC,GAAd,iBAAAC,EAAA,6DACfC,EAAS,CACXC,QAAS,CAACC,cAAeT,IAFR,SAKEJ,IAAMc,IAAIX,qBAA2BM,EAAUA,UAAWA,EAAUA,UAAWE,GALjF,cAKfI,EALe,yBAMdA,EAASC,MANK,2CAAH,wDAmDlBE,oBA1CqB,uCAAG,WAAMV,EAAQC,GAAd,iBAAAC,EAAA,6DAClBC,EAAS,CACZC,QAAS,CAACC,cAAeT,IAFJ,SAKDJ,IAAMc,IAAIX,2BAAiCM,EAAUA,UAAWA,EAAUA,UAAWE,GALpF,cAKlBI,EALkB,yBAMjBA,EAASC,MANQ,2CAAH,wDA2CrBG,qBAlCsB,uCAAG,WAAMX,EAAQC,GAAd,iBAAAC,EAAA,6DACnBC,EAAS,CACZC,QAAS,CAACC,cAAeT,IAE5BgB,QAAQC,IAAIZ,EAAUA,WAJG,SAKFT,IAAMc,IAAIX,4BAAkCM,EAAUA,UAAWA,EAAUA,UAAWE,GALpF,cAKnBI,EALmB,yBAMlBA,EAASC,MANS,2CAAH,wDAmCtBM,UA1BW,uCAAG,WAAMd,EAAQC,GAAd,iBAAAC,EAAA,6DACRC,EAAS,CACZC,QAAS,CAACC,cAAeT,IAE5BgB,QAAQC,IAAIZ,EAAUA,WAJR,SAKST,IAAMc,IAAIX,+BAAqCM,EAAUA,UAAWA,EAAUA,UAAWE,GALlG,cAKRI,EALQ,yBAMPA,EAASC,MANF,2CAAH,wDA2BXO,UAjBW,uCAAG,WAAMf,EAAQC,GAAd,iBAAAC,EAAA,6DACRC,EAAS,CACZC,QAAS,CAACC,cAAeT,IAFd,SAKSJ,IAAMc,IAAIX,+BAAqCM,EAAUA,UAAWA,EAAUA,UAAWE,GALlG,cAKRI,EALQ,yBAMPA,EAASC,MANF,2CAAH,yDCjDA,EAJQ,WACrB,OAAOhB,IAAMC,IAHC,U,QCsDDuB,EArDD,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,YAClBC,EAD0C,EAAXC,KACJ,sBAAwB,qBAEzD,OACE,yBAAKC,UAAWF,GACd,6BAASE,UAAU,cACjB,6BACE,+BACE,+BACE,4BACE,wBAAIC,QAAQ,KACV,yBAAKD,UAAU,iBACb,yBAAKE,IAAKN,EAAQO,SAAUC,IAAKR,EAAQS,SAG7C,4BACE,yBAAKL,UAAU,gBACZJ,EAAQS,MAEX,yBAAKL,UAAU,gBACZJ,EAAQU,MAAQV,EAAQU,MAAMC,UAAY,sBAE7C,yBAAKP,UAAU,gBACZJ,EAAQY,YAEX,yBAAKR,UAAU,gBACZJ,EAAQa,cAIf,4BACE,4BACE,yBAAKT,UAAU,gBAAf,iBACiBJ,EAAQc,sBAI7B,4BACE,4BACE,uBAAGC,KAAMf,EAAQgB,UAAjB,yBAOV,4BAAQC,QAAShB,GAAjB,YC4KOiB,EAxNI,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAAiB,EAEdC,mBAAS,CACzCC,IAAK,aACLC,UAAW,cAJmC,mBAE3CC,EAF2C,KAE/BC,EAF+B,OAM1BJ,oBAAS,GANiB,mBAM3CnB,EAN2C,KAMrCwB,EANqC,OAOJL,mBAAS,IAPL,mBAO3CM,EAP2C,KAO1BC,EAP0B,KASlD,IAAIT,EACF,OAAO,KAGT,IAIMU,EAAc,SAAAP,GAChB,IAAIC,EAAY,YACZC,EAAWF,MAAQA,GAAgC,cAAzBE,EAAWD,YACvCA,EAAY,cAOdE,EAJgB,CACZH,IAAKA,EACLC,UAAWA,KAKbO,EAAkB,SAAC/C,GACvB,OAAGqC,IAAgBF,EACV,KAIP,4BACE,4BAAQF,QAAS,kBAAMe,EAAYlD,gBAAgBqC,EAAKc,GAAIjD,KAA5D,oBAES,6BACT,4BAAQiC,QAAS,kBAAMe,EAAYxC,iBAAiB2B,EAAKc,GAAIjD,KAA7D,uBAOAkD,EAAqB,SAAClD,GAC1B,OAAIqC,GAAgBF,EAKlB,4BACE,4BAAQF,QAAS,kBAAMe,EAAYvC,oBAAoB0B,EAAKc,GAAIjD,KAAhE,WALK,MAgCLmD,EAAa,SAAC,GAAe,IAAdnC,EAAa,EAAbA,QACfoC,GAAcpC,EAAQc,mBAAqBd,EAAQqC,qBAAqBC,QAAQ,GAChFC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,IAKDI,EAAoB,SAAC,GAAe,IAAdxC,EAAa,EAAbA,QACtBoC,IAAgBpC,EAAQc,mBAAqBd,EAAQqC,qBAAqBrC,EAAQqC,oBAAuB,KAAKC,QAAQ,GACtHC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,EADH,MAMAK,EAAc,YAAOrB,GAEzB,GAAmB,OAAfK,EAAqB,CAEvB,IAAIiB,EAAS,KACTC,EAAS,KAEbF,EAAeG,MAAK,SAAC3D,EAAG4D,GAgBtB,GAduB,eAAnBpB,EAAWF,KACbmB,EAASzD,EAAC,mBAAyBA,EAAC,oBACpC0D,EAASE,EAAC,mBAAyBA,EAAC,qBAEX,sBAAnBpB,EAAWF,KACjBmB,GAAUzD,EAAC,mBAAyBA,EAAC,qBAAyBA,EAAC,oBAC/D0D,GAAUE,EAAC,mBAAyBA,EAAC,qBAAyBA,EAAC,sBAG/DH,EAASzD,EAAEwC,EAAWF,KACtBoB,EAASE,EAAEpB,EAAWF,MAIV,OAAXmB,EAEA,OAAO,EAEL,GAAc,OAAXC,EAEL,OAAQ,EAGX,IAAIG,EArFe,SAAC7D,EAAG4D,GACvB,MAAgB,kBAAN5D,GAA+B,kBAAN4D,EACxB5D,EAAE8D,cAAcF,OAAGG,EAAW,CAACC,SAAS,EAAMC,YAAa,SAG9DjE,EAAI4D,EACG,EAEH5D,EAAI4D,GACA,EAGD,EAyEQM,CAAeT,EAAQC,GAC9C,OAAIG,EAAmB,EACW,cAAzBrB,EAAWD,WAA6B,EAAI,EAC1CsB,EAAmB,EACI,cAAzBrB,EAAWD,UAA4B,GAAK,EAE9C,KAKX,OACE,6BACE,kBAAC,EAAD,CAAOxB,QAAS4B,EAAiBzB,KAAMA,EAAMF,YArJ/B,WAChB0B,GAAQ,MAqJN,2BAAOvB,UAAU,oBACf,+BACE,4BACE,4BACE,4BAAQgD,KAAK,SAASnC,QAAS,kBAAMa,EAAY,UAAjD,SAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,gBAAjD,WAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,wBAAjD,UAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,gBAAjD,gBAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,uBAAjD,sBAMN,+BACGW,EAAeY,KAAI,SAAArD,GAAO,OACzB,wBAAIuB,IAAKvB,EAAQhB,WACf,4BACE,4BAAQiC,QAAS,WACjBY,EAAmB7B,GACnB2B,GAAQ,KACN3B,EAAQS,OAEZ,4BAAKT,EAAQY,YACb,4BAAKZ,EAAQc,oBACb,4BAAI,kBAACqB,EAAD,CAAYnC,QAASA,KACzB,4BAAI,kBAACwC,EAAD,CAAmBxC,QAASA,KAChC,kBAAC+B,EAAD,CAAiB/C,UAAWgB,EAAQsD,MACpC,kBAACpB,EAAD,CAAoBlD,UAAWgB,EAAQsD,cC5MjDC,EAAU,SAACtE,EAAG4D,GAClB,OAAI5D,EAAE0B,UAAYkC,EAAElC,WACV,EAEN1B,EAAE0B,UAAYkC,EAAElC,UACX,EAGF,GAsFM6C,EAnFA,WAAO,IAAD,EACSlC,mBAAS,IADlB,mBACZmC,EADY,KACJC,EADI,OAESpC,mBAAS,IAFlB,mBAEZqC,EAFY,KAEJC,EAFI,OAIKtC,mBAAS,MAJd,mBAIZH,EAJY,KAIN0C,EAJM,OAKmBvC,mBAAS,MAL5B,mBAKZwC,EALY,KAKCC,EALD,KAiBbC,EAAsB,SAACvF,GACd,IAAVA,GACDkB,QAAQC,IAAI,eACZqE,IAEGC,MAAK,SAAA5E,GACJoE,EAAUpE,EAASC,UAIvB0E,EACiBxF,GACdyF,MAAK,SAAA5E,GACJoE,EAAUpE,EAASC,UAK3B4E,qBAAU,WACN,IAAMC,EAAiBC,OAAOC,aAAaC,QA7BtB,kBA8BrB,GAAGH,EAAgB,CACf,IAAMjD,EAAOqD,KAAKC,MAAML,GACxBP,EAAQ1C,GACRa,EAAYpD,SAASuC,EAAKxC,UAE/B,IAEHwF,qBAAU,WACRH,EAAoB,MAnCpBU,IAEKR,MAAK,SAAA5E,GACJsE,EAAUtE,EAASC,KAAKqD,KAAKW,OAkCnCoB,IAA6BT,MAAK,SAAA5E,GAAQ,OAAIyE,EAAezE,EAASC,KAAKuE,kBAC1E,IAQH,IANA,IAMQc,EAAI,EAAGA,EAAInB,EAAOoB,OAAQD,IACZnB,EAAOmB,GAAG9D,mBAIhC,OACE,yBAAKgE,MAAM,UACT,qDACE,6BACG3D,EAAO,iBAAmBA,EAAK4D,SAAW,6BAAM,6BAAK,6BADxD,iBAEiBjB,GAEjB,4BAAQ7B,GAAG,eAAexB,KAAK,OAAOuE,SAAU,SAACC,GAAD,OAlBjCC,EAkBwDD,EAAME,OAAOC,MAjBxFpB,EAAoBkB,QACpBG,SAASC,eAAe,gBAAgBF,MAAQF,GAF9B,IAACA,IAmBZvB,EAAON,KAAI,SAAA3C,GAAK,OACf,4BAAQ0E,MAAO1E,EAAMwE,QAAS3D,IAAKb,EAAMwE,SACtCxE,EAAMC,cAGX,4BAAQyE,MAAO,EAAG7D,IAAK,GAAvB,sBAIJ,kBAAC,EAAD,CAAYJ,KAAMA,EAAMC,SAAUqC,EAAQpC,aAAa,MC7D9CkE,EAjCH,WACR,OACI,6BACI,mCACA,yDACA,6VAEI,6BAAK,6BAFT,6HAKA,6DACA,iEAEI,4BACI,4CACA,8CACA,+CACA,4DANR,6QAYA,uDACA,kNAEI,6BAAK,6BAFT,wdClBG,GAAEC,MALN,uCAAG,WAAMC,GAAN,eAAAxG,EAAA,sEACWV,IAAMmH,KAHf,SAG6BD,GAD/B,cACNnG,EADM,yBAELA,EAASC,MAFJ,2CAAH,uDC0EMoG,EAzEC,WAAO,IAAD,EACYrE,mBAAS,IADrB,mBACbyD,EADa,KACHa,EADG,OAEYtE,mBAAS,IAFrB,mBAEbuE,EAFa,KAEHC,EAFG,OAGIxE,mBAAS,MAHb,mBAGbH,EAHa,KAGP0C,EAHO,KAOpBM,qBAAU,WACR,IAAMC,EAAiBC,OAAOC,aAAaC,QAHpB,kBAIvB,GAAGH,EAAgB,CACf,IAAMjD,EAAOqD,KAAKC,MAAML,GACxBP,EAAQ1C,GACRa,EAAYpD,SAASuC,EAAKxC,UAE7B,IAEH,IAAMoH,EAAW,uCAAG,WAAOd,GAAP,eAAAhG,EAAA,6DAChBgG,EAAMe,iBADU,kBAGKC,EAAaT,MAAM,CACpCT,WAAUc,aAJE,OAGR1E,EAHQ,OAOdkD,OAAOC,aAAa4B,QAlBD,iBAmBG1B,KAAK2B,UAAUhF,IAGrCa,EAAYpD,SAASuC,EAAKxC,OAC1BkF,EAAQ1C,GACRyE,EAAY,IACZE,EAAY,IAdE,kDAgBdnG,QAAQC,IAAR,MAhBc,0DAAH,sDAkDjB,OACE,6BACGuB,EATD,6CACgBA,EAAK4D,SACnB,4BAAQ9D,QAAS,kBAxBrB4C,EAAQ,WACRQ,OAAOC,aAAa8B,UAuBhB,WAlBF,0BAAMC,SAAUN,GACd,wCAEI,2BAAO3C,KAAK,OAAOgC,MAAOL,EAAUtE,KAAK,WAAWuE,SAAU,gBAAGG,EAAH,EAAGA,OAAH,OAAgBS,EAAYT,EAAOC,WAErG,wCAEI,2BAAOhC,KAAK,OAAOgC,MAAOS,EAAUpF,KAAK,WAAWuE,SAAU,gBAAGG,EAAH,EAAGA,OAAH,OAAgBW,EAAYX,EAAOC,WAErG,4BAAQhC,KAAK,UAAb,YCjDK,EAJC,SAACrE,GACf,OAAOR,IAAMC,IAAIE,UAAgBK,ICwNpBuH,EAxNQ,SAAC,GAA8B,IAA7BnF,EAA4B,EAA5BA,KAAMoF,EAAsB,EAAtBA,iBAAsB,EAEbjF,mBAAS,CACzCC,IAAK,aACLC,UAAW,cAJkC,mBAE1CC,EAF0C,KAE9BC,EAF8B,OAMzBJ,oBAAS,GANgB,mBAM1CnB,EAN0C,KAMpCwB,EANoC,OAOHL,mBAAS,IAPN,mBAO1CM,EAP0C,KAOzBC,EAPyB,KASjD,IAAI0E,EACF,OAAO,KAGT,IAIMzE,EAAc,SAAAP,GAChB,IAAIC,EAAY,YACZC,EAAWF,MAAQA,GAAgC,cAAzBE,EAAWD,YACvCA,EAAY,cAOdE,EAJgB,CACZH,IAAKA,EACLC,UAAWA,KAmBbU,EAAqB,SAAClD,GAC1B,OAAImC,EAKF,4BACE,4BAAQF,QAAS,kBAAMe,EAAYvC,oBAAoB0B,EAAKc,GAAIjD,KAAhE,WALK,MAgCLmD,EAAa,SAAC,GAAe,IAAdnC,EAAa,EAAbA,QACfoC,GAAcpC,EAAQc,mBAAqBd,EAAQqC,qBAAqBC,QAAQ,GAChFC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,IAKDI,EAAoB,SAAC,GAAe,IAAdxC,EAAa,EAAbA,QACtBoC,IAAgBpC,EAAQc,mBAAqBd,EAAQqC,qBAAqBrC,EAAQqC,oBAAuB,KAAKC,QAAQ,GACtHC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,EADH,MAMAoE,EAAsB,YAAOD,GAEjC,GAAmB,OAAf9E,EAAqB,CAEvB,IAAIiB,EAAS,KACTC,EAAS,KAEb6D,EAAuB5D,MAAK,SAAC3D,EAAG4D,GAgB9B,GAduB,eAAnBpB,EAAWF,KACbmB,EAASzD,EAAC,mBAAyBA,EAAC,oBACpC0D,EAASE,EAAC,mBAAyBA,EAAC,qBAEX,sBAAnBpB,EAAWF,KACjBmB,GAAUzD,EAAC,mBAAyBA,EAAC,qBAAyBA,EAAC,oBAC/D0D,GAAUE,EAAC,mBAAyBA,EAAC,qBAAyBA,EAAC,sBAG/DH,EAASzD,EAAEwC,EAAWF,KACtBoB,EAASE,EAAEpB,EAAWF,MAIV,OAAXmB,EAEA,OAAO,EAEL,GAAc,OAAXC,EAEL,OAAQ,EAGX,IAAIG,EArFe,SAAC7D,EAAG4D,GACvB,MAAgB,kBAAN5D,GAA+B,kBAAN4D,EACxB5D,EAAE8D,cAAcF,OAAGG,EAAW,CAACC,SAAS,EAAMC,YAAa,SAG9DjE,EAAI4D,EACG,EAEH5D,EAAI4D,GACA,EAGD,EAyEQM,CAAeT,EAAQC,GAC9C,OAAIG,EAAmB,EACW,cAAzBrB,EAAWD,WAA6B,EAAI,EAC1CsB,EAAmB,EACI,cAAzBrB,EAAWD,UAA4B,GAAK,EAE9C,KAKX,OACE,6BACE,kBAAC,EAAD,CAAOxB,QAAS4B,EAAiBzB,KAAMA,EAAMF,YAlJ/B,WAChB0B,GAAQ,MAkJN,2BAAO8E,MAAM,oBACX,+BACE,4BACE,4BACE,4BAAQrD,KAAK,SAASnC,QAAS,kBAAMa,EAAY,UAAjD,SAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,gBAAjD,WAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,wBAAjD,UAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,gBAAjD,gBAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,uBAAjD,oBAIF,0CAKJ,+BACG0E,EAAuBnD,KAAI,SAAAqD,GAAc,OACxC,wBAAInF,IAAKmF,EAAe1G,QAAQhB,WAC9B,4BACE,4BAAQiC,QAAS,WACjBY,EAAmB6E,EAAe1G,SAClC2B,GAAQ,KACN+E,EAAe1G,QAAQS,OAE3B,4BAAKiG,EAAe1G,QAAQY,YAC5B,4BAAK8F,EAAe1G,QAAQc,oBAC5B,4BAAI,kBAACqB,EAAD,CAAYnC,QAAS0G,EAAe1G,WACxC,4BAAI,kBAACwC,EAAD,CAAmBxC,QAAS0G,EAAe1G,WAC/C,4BAAK0G,EAAeC,UACpB,kBAACzE,EAAD,CAAoBlD,UAAW0H,EAAe1G,QAAQsD,cCxKvDsD,EAtCG,WAAO,IAAD,EACItF,mBAAS,MADb,mBACbH,EADa,KACP0C,EADO,OAEcvC,mBAAS,IAFvB,mBAEbuF,EAFa,KAEFC,EAFE,KAcpB3C,qBAAU,WACN,IATkBpF,EASZqF,EAAiBC,OAAOC,aAAaC,QAXtB,kBAYrB,GAAGH,EAAgB,CACf,IAAMjD,EAAOqD,KAAKC,MAAML,GACxBP,EAAQ1C,GAZMpC,EAaDoC,EAAKc,GAZtB8E,EACahI,GACRmF,MAAK,SAAA5E,GACFwH,EAAaxH,EAASC,KAAKsH,cAU/B7E,EAAYpD,SAASuC,EAAKxC,UAE/B,IAMH,OACI,yBAAKmG,MAAM,UACP,yCACC3D,EANE,kBAAC,EAAD,CAAgBA,KAAMA,EAAMoF,iBAAkBM,IAMtB,+BC+TxBG,EA9VS,SAAC,GAAY,IAAX7F,EAAU,EAAVA,KAAU,EAEIG,mBAAS,CACzCC,IAAK,aACLC,UAAW,cAJiB,mBAEzBC,EAFyB,KAEbC,EAFa,OAMRJ,oBAAS,GAND,mBAMzBnB,EANyB,KAMnBwB,EANmB,OAOcL,mBAAS,IAPvB,mBAOzBM,EAPyB,KAORC,EAPQ,OAQkBP,mBAAS,IAR3B,mBAQzB2F,EARyB,KAQNC,EARM,KAehC,GALA/C,qBAAU,WACRgD,EAAqBhG,EAAKc,MACzB,KAGCgF,EACF,OAAO,KAGT,IAAME,EAAuB,SAACpI,GAC5BgI,EACahI,GACRmF,MAAK,SAAA5E,GACF4H,EAAqB5H,EAASC,KAAK6H,mBASvCtF,EAAc,SAAAP,GAChB,IAAIC,EAAY,YACZC,EAAWF,MAAQA,GAAgC,cAAzBE,EAAWD,YACvCA,EAAY,cAOdE,EAJgB,CACZH,IAAKA,EACLC,UAAWA,KAKbU,EAAqB,SAAClD,GAC1B,OAAImC,EAKF,4BACE,4BAAQF,QAAS,kBAAMoG,EAAcrI,KAArC,WALK,MAYLsI,EAA2B,SAACtI,GAChC,OAAImC,EAKF,4BACE,4BAAQF,QAAS,kBAAMpB,EAAUb,KAAjC,KAES,6BACT,4BAAQiC,QAAS,kBAAMnB,EAAUd,KAAjC,MARK,MAeLa,EAAS,uCAAG,WAAOb,GAAP,SAAAC,EAAA,yDACZkC,EADY,yCAEP,MAFO,uBAKTa,EAAYnC,UAAUsB,EAAKc,GAAIjD,GALtB,OAMfmI,EAAqBhG,EAAKc,IANX,2CAAH,sDASTnC,EAAS,uCAAG,WAAOd,GAAP,SAAAC,EAAA,yDACZkC,EADY,yCAEP,MAFO,uBAKTa,EAAYlC,UAAUqB,EAAKc,GAAIjD,GALtB,OAMfmI,EAAqBhG,EAAKc,IANX,2CAAH,sDASToF,EAAa,uCAAG,WAAOrI,GAAP,SAAAC,EAAA,yDACdkC,EADc,yCAEP,MAFO,uBAKZa,EAAYtC,qBAAqByB,EAAKc,GAAIjD,GAL9B,OAMlBmI,EAAqBhG,EAAKc,IANR,2CAAH,sDA6BbE,EAAa,SAAC,GAAe,IAAdnC,EAAa,EAAbA,QACnB,IAAIA,EACA,OAAO,KAEX,IAAIoC,GAAcpC,EAAQc,mBAAqBd,EAAQqC,qBAAqBC,QAAQ,GAChFC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,IAKDI,EAAoB,SAAC,GAAe,IAAdxC,EAAa,EAAbA,QAC1B,IAAIA,EACE,OAAO,KAEb,IAAIoC,IAAgBpC,EAAQc,mBAAqBd,EAAQqC,qBAAqBrC,EAAQqC,oBAAuB,KAAKC,QAAQ,GACtHC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,EADH,MAMEmF,EAAmB,SAAC,GAAa,IAC/BnF,EAD8B,EAAXgD,MACA9C,QAAQ,GAC3BC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,IAKDoF,EAA0B,SAAC,GAAa,IAExCpF,EAFuC,EAAXgD,MAET9C,QAAQ,GAC3BC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,EADH,MAOFqF,EAAuB,YAAOR,GAElC,GAAmB,OAAfxF,EAAqB,CAEvB,IAAIiB,EAAS,KACTC,EAAS,KAEb8E,EAAwB7E,MAAK,SAAC3D,EAAG4D,GAE/B,IAAI6E,EAAWzI,EAAEe,QACb2H,EAAW9E,EAAE7C,QAgBjB,GAduB,eAAnByB,EAAWF,KACbmB,EAASgF,EAAQ,mBAAyBA,EAAQ,oBAClD/E,EAASgF,EAAQ,mBAAyBA,EAAQ,qBAEzB,sBAAnBlG,EAAWF,KACjBmB,GAAUgF,EAAQ,mBAAyBA,EAAQ,qBAAyBA,EAAQ,oBACpF/E,GAAUgF,EAAQ,mBAAyBA,EAAQ,qBAAyBA,EAAQ,sBAGpFjF,EAASgF,EAASjG,EAAWF,KAC7BoB,EAASgF,EAASlG,EAAWF,MAIjB,OAAXmB,EAEA,OAAO,EAEL,GAAc,OAAXC,EAEL,OAAQ,EAGX,IAAIG,EApIe,SAAC7D,EAAG4D,GACvB,MAAgB,kBAAN5D,GAA+B,kBAAN4D,EACxB5D,EAAE8D,cAAcF,OAAGG,EAAW,CAACC,SAAS,EAAMC,YAAa,SAG9DjE,EAAI4D,EACG,EAEH5D,EAAI4D,GACA,EAGD,EAwHQM,CAAeT,EAAQC,GAC9C,OAAIG,EAAmB,EACW,cAAzBrB,EAAWD,WAA6B,EAAI,EAC1CsB,EAAmB,EACI,cAAzBrB,EAAWD,UAA4B,GAAK,EAE9C,KAOX,IAuBIoG,EAvBoB,SAACX,GAKrB,IAJA,IAEIY,EAFAC,EAAa,EACbC,EAAqB,EAGjBnD,EAAI,EAAGA,EAAIqC,EAAkBpC,OAAQD,IAAK,CAC9C,IAAMoD,EAAiBf,EAAkBrC,GAAG5E,QACtCiI,EAAkBhB,EAAkBrC,GAAG+B,SAE7CmB,GAAcE,EAAelH,mBAAqBmH,EAClDF,GAAsBC,EAAe3F,oBAAsB4F,EAM/D,MAAO,CACHH,aACAD,UALJA,EAAYC,EAAaC,EAMrBG,iBALmBL,EAAYE,EAAqB,KAS/CI,CAAgBV,GAE7B,OACE,6BACE,kBAAC,EAAD,CAAOzH,QAAS4B,EAAiBzB,KAAMA,EAAMF,YA1P/B,WAChB0B,GAAQ,MA0PN,2BAAO8E,MAAM,oBACX,+BACE,4BACE,4BACE,4BAAQrD,KAAK,SAASnC,QAAS,kBAAMa,EAAY,UAAjD,SAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,gBAAjD,WAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,wBAAjD,eAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,gBAAjD,gBAIF,4BACE,4BAAQsB,KAAK,SAASnC,QAAS,kBAAMa,EAAY,uBAAjD,oBAIF,wBAAIsG,QAAQ,KAAZ,cAKJ,+BACGX,EAAwBpE,KAAI,SAAAgF,GAAe,OAC1C,wBAAI9G,IAAK8G,EAAgBrI,QAAQhB,WAC/B,4BACE,4BAAQiC,QAAS,WACjBY,EAAmBwG,EAAgBrI,SACnC2B,GAAQ,KACN0G,EAAgBrI,QAAQS,OAE5B,4BAAK4H,EAAgBrI,QAAQY,YAC7B,4BAAKyH,EAAgBrI,QAAQc,oBAC7B,4BAAI,kBAACqB,EAAD,CAAYnC,QAAUqI,EAAgBrI,WAC1C,4BAAI,kBAACwC,EAAD,CAAmBxC,QAAUqI,EAAgBrI,WACjD,4BAAKqI,EAAgB1B,UACrB,kBAACW,EAAD,CAA0BtI,UAAWqJ,EAAgBrI,QAAQsD,MAC7D,kBAACpB,EAAD,CAAoBlD,UAAWqJ,EAAgBrI,QAAQsD,UAG3D,wBAAI/B,IAAK,GACL,wBAAI6G,QAAQ,KAAZ,UAGA,4BACKR,EAAOE,WAAWxF,QAAQ,IAE/B,4BACI,kBAACiF,EAAD,CAAkBnC,MAAOwC,EAAOC,aAEpC,4BACI,kBAACL,EAAD,CAAyBpC,MAAOwC,EAAOM,yBClT5CI,EAnCI,WAAO,IAAD,EACGhH,mBAAS,MADZ,mBACdH,EADc,KACR0C,EADQ,OAEqBvC,mBAAS,IAF9B,mBAEd8F,EAFc,KAECmB,EAFD,KAarBpE,qBAAU,WACN,IATsBpF,EAShBqF,EAAiBC,OAAOC,aAAaC,QAXtB,kBAYrB,GAAGH,EAAgB,CACf,IAAMjD,EAAOqD,KAAKC,MAAML,GACxBP,EAAQ1C,GAZUpC,EAaDoC,EAAKc,GAZ1B8E,EACahI,GACRmF,MAAK,SAAA5E,GACFiJ,EAAiBjJ,EAASC,KAAK6H,kBAUnCpF,EAAYpD,SAASuC,EAAKxC,UAE/B,IAMH,OACI,yBAAKmG,MAAM,UACP,0CACC3D,EANE,kBAAC,EAAD,CAAiBA,KAAMA,EAAM8F,kBAAmBG,IAMvB,+B,MCdxC,IAceoB,EAdH,WACV,OACE,8BAZA,6BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,UADF,QAEE,kBAAC,IAAD,CAAMA,GAAG,QAAT,OAFF,QAGE,kBAAC,IAAD,CAAMA,GAAG,UAAT,SAHF,QAIE,kBAAC,IAAD,CAAMA,GAAG,cAAT,aAJF,QAKE,kBAAC,IAAD,CAAMA,GAAG,eAAT,eASA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWnF,EAAQoF,OAAK,IACxC,kBAAC,IAAD,CAAOF,KAAK,OAAOC,UAAWpD,IAC9B,kBAAC,IAAD,CAAOmD,KAAK,SAASC,UAAWhD,IAChC,kBAAC,IAAD,CAAO+C,KAAK,aAAaC,UAAW/B,IACpC,kBAAC,IAAD,CAAO8B,KAAK,cAAcC,UAAWL,OCzB7CO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJ1D,SAASC,eAAe,W","file":"static/js/main.3a3924f2.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/products'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst getAllFromSet = (setId) => {\r\n  return axios.get(baseUrl + '/group/' + setId)\r\n}\r\n\r\nconst getAllPricesFromUser = (userId) => {\r\n  return axios.get('/users/' + userId)\r\n}\r\nexport default {\r\n  getAll,\r\n  getAllFromSet,\r\n  getAllPricesFromUser\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = '/groups'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nexport default {\r\n  getAll\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = '/lists'\r\n\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst pushToWatchlist = async(userId, productId) => {\r\n    const config = {\r\n        headers: {Authorization: token}\r\n    }\r\n\r\n    const response = await axios.put(baseUrl + '/watchlist/' + productId.productId, productId.productId, config)\r\n    return response.data\r\n}\r\n\r\nconst pushToCollection = async(userId, productId) => {\r\n    const config = {\r\n        headers: {Authorization: token}\r\n    }\r\n\r\n    const response = await axios.put(baseUrl + '/collection/' + productId.productId, productId.productId, config)\r\n    return response.data\r\n}\r\n\r\nconst deleteFromWatchlist = async(userId, productId) => {\r\n    const config = {\r\n       headers: {Authorization: token}\r\n    }\r\n    \r\n    const response = await axios.put(baseUrl + '/watchlist/delete/' + productId.productId, productId.productId, config)\r\n    return response.data\r\n}\r\n\r\nconst deleteFromCollection = async(userId, productId) => {\r\n    const config = {\r\n       headers: {Authorization: token}\r\n    }\r\n    console.log(productId.productId)\r\n    const response = await axios.put(baseUrl + '/collection/delete/' + productId.productId, productId.productId, config)\r\n    return response.data\r\n}\r\n\r\nconst increment = async(userId, productId) => {\r\n    const config = {\r\n       headers: {Authorization: token}\r\n    }\r\n    console.log(productId.productId)\r\n    const response = await axios.put(baseUrl + '/collection/increment/' + productId.productId, productId.productId, config)\r\n    return response.data\r\n}\r\n\r\n\r\nconst decrement = async(userId, productId) => {\r\n    const config = {\r\n       headers: {Authorization: token}\r\n    }\r\n    \r\n    const response = await axios.put(baseUrl + '/collection/decrement/' + productId.productId, productId.productId, config)\r\n    return response.data\r\n}\r\n\r\n\r\nexport default {\r\n    setToken,\r\n    pushToWatchlist,\r\n    pushToCollection,\r\n    deleteFromWatchlist,\r\n    deleteFromCollection,\r\n    increment,\r\n    decrement\r\n}","import axios from 'axios'\r\nconst baseUrl = '/meta'\r\n\r\nconst getLastUpdated = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nexport default {\r\n  getLastUpdated\r\n}\r\n","import React from 'react'\r\n\r\nconst Modal = ({ product, handleClose, show }) => {\r\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className=\"modal-main\">\r\n        <div>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td rowSpan=\"3\">\r\n                  <div className=\"product-image\">\r\n                    <img src={product.imageUrl} alt={product.name} />\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div className=\"product-name\">\r\n                    {product.name}\r\n                  </div>\r\n                  <div className=\"product-info\">\r\n                    {product.group ? product.group.groupName : 'Set Name Not Found'}\r\n                  </div>\r\n                  <div className=\"product-info\">\r\n                    {product.cardNumber}\r\n                  </div>\r\n                  <div className=\"product-info\">\r\n                    {product.cardRarity}\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <div className=\"product-info\">\r\n                    Market Price: {product.currentMarketPrice}\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <a href={product.storeUrl}>TCGPlayer prices</a>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n\r\n        </div>\r\n        <button onClick={handleClose}>close</button>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Modal","import React, {useState} from 'react';\r\nimport Modal from './Modal.js'\r\nimport listService from '../services/listService'\r\n\r\nconst PriceTable = ({user, products, isWatchlist}) => {\r\n\r\n    const [sortConfig, setSortConfig] = useState({\r\n        key: 'cardNumber',\r\n        direction: 'ascending'\r\n    })\r\n    const [show, setShow] = useState(false)\r\n    const [selectedProduct, setSelectedProduct] = useState({})\r\n   \r\n    if(!products) {\r\n      return null\r\n    }\r\n  \r\n    const hideModal = () => {\r\n      setShow(false)\r\n    }\r\n\r\n    const requestSort = key => {\r\n        let direction = 'ascending'\r\n        if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n          direction = 'descending'\r\n        }\r\n\r\n        let newConfig = {\r\n            key: key,\r\n            direction: direction\r\n        }\r\n        setSortConfig(newConfig)\r\n    }\r\n\r\n    const AddButtonColumn = (productId) => {\r\n      if(isWatchlist || !user) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <td>\r\n          <button onClick={() => listService.pushToWatchlist(user.id, productId)}>\r\n            Add to Watchlist\r\n          </button><br/>\r\n          <button onClick={() => listService.pushToCollection(user.id, productId)}>\r\n            Add to Collection\r\n          </button>\r\n        </td>\r\n      )\r\n    }\r\n\r\n    const DeleteButtonColumn = (productId) => {\r\n      if(!isWatchlist || !user) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <td>\r\n          <button onClick={() => listService.deleteFromWatchlist(user.id, productId)}>\r\n            Delete\r\n          </button>\r\n        </td>\r\n      )\r\n    }\r\n\r\n    //All-purpose method that can compare string and integer numbers\r\n    //Used to ensure that '10' comes before '2' for example, which doesn't happen with lexicographical comaprison\r\n    //Also handles strings that simply contain numbers (e.g. 1/202)\r\n    const compareNumbers = (a, b) => {\r\n        if(typeof a === 'string' && typeof b === 'string') {\r\n            return a.localeCompare(b, undefined, {numeric: true, sensitivity: 'base'})\r\n        }\r\n        else {\r\n            if (a > b) {\r\n                return 1\r\n            }\r\n            else if(a < b) {\r\n                return -1\r\n            }\r\n            else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    const Difference = ({product}) => {\r\n      let difference = (product.currentMarketPrice - product.previousMarketPrice).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}\r\n        </font>\r\n      )\r\n    }\r\n\r\n    const PercentDifference = ({product}) => {\r\n      let difference = (((product.currentMarketPrice - product.previousMarketPrice)/product.previousMarketPrice) * 100).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}%\r\n        </font>\r\n      )\r\n    }\r\n\r\n    let sortedProducts = [...products]\r\n    \r\n    if (sortConfig !== null) {\r\n\r\n      let aValue = null\r\n      let bValue = null      \r\n\r\n      sortedProducts.sort((a, b) => {  \r\n\r\n        if (sortConfig.key === 'difference') {\r\n          aValue = a['currentMarketPrice'] - a['previousMarketPrice']\r\n          bValue = b['currentMarketPrice'] - b['previousMarketPrice']\r\n        }\r\n        else if(sortConfig.key === 'percentDifference') {\r\n          aValue = (a['currentMarketPrice'] - a['previousMarketPrice'])/a['previousMarketPrice']\r\n          bValue = (b['currentMarketPrice'] - b['previousMarketPrice'])/b['previousMarketPrice']\r\n        }\r\n        else {\r\n          aValue = a[sortConfig.key]\r\n          bValue = b[sortConfig.key]\r\n        }\r\n\r\n        //Null values (unnumbered cards or empty prices) go to the end regardless of sort order      \r\n        if(aValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? 1 : -1\r\n           return 1\r\n        }\r\n        else if(bValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? -1 : 1\r\n           return -1\r\n        }\r\n\r\n        let comparisonResult = compareNumbers(aValue, bValue)\r\n        if (comparisonResult < 0) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1\r\n        } else if (comparisonResult > 0) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1\r\n        } else {\r\n        return 0\r\n        }\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <Modal product={selectedProduct} show={show} handleClose={hideModal}/>\r\n        <table className=\"price-list-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('name')}>\r\n                  Name\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('cardNumber')}>\r\n                  Number\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('currentMarketPrice')}>\r\n                  Price\r\n                </button>\r\n              </th>        \r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('difference')}>\r\n                  Week Change\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('percentDifference')}>\r\n                  Week Change (%)\r\n                </button>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedProducts.map(product => (\r\n              <tr key={product.productId}>\r\n                <td>\r\n                  <button onClick={() => {\r\n                  setSelectedProduct(product)\r\n                  setShow(true)\r\n                }}>{product.name}</button>\r\n                </td>\r\n                <td>{product.cardNumber}</td>\r\n                <td>{product.currentMarketPrice}</td>\r\n                <td><Difference product={product}/></td>\r\n                <td><PercentDifference product={product}/></td>\r\n                <AddButtonColumn productId={product._id}/>\r\n                <DeleteButtonColumn productId={product._id}/>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PriceTable\r\n","import React, {useState, useEffect} from 'react'\r\nimport priceService from '../services/priceService'\r\nimport groupService from '../services/groupService'\r\nimport listService from '../services/listService'\r\nimport metaService from '../services/metaService'\r\nimport PriceTable  from './PriceTable'\r\n\r\nconst compare = (a, b) => {\r\n  if (a.groupName < b.groupName) {\r\n    return -1;\r\n  }\r\n  if (a.groupName > b.groupName) {\r\n    return 1;\r\n  }\r\n  // a must be equal to b\r\n  return 0;\r\n}\r\n\r\nconst Prices = () => {\r\n  const [prices, setPrices] = useState([])\r\n  const [groups, setGroups] = useState([])\r\n  \r\n  const [user, setUser] = useState(null)\r\n  const [lastUpdated, setLastUpdated] = useState(null)\r\n\r\n  const LOCAL_STORAGE_ID = 'loggedInGxUser'\r\n\r\n  const getAllGroups = () => {\r\n    groupService\r\n        .getAll()\r\n        .then(response => {\r\n          setGroups(response.data.sort(compare))\r\n        })\r\n  }\r\n\r\n  const getAllPricesFromSet = (setId) => {\r\n    if(setId === 0) {\r\n      console.log(\"getting all\")\r\n      priceService\r\n        .getAll()\r\n        .then(response => {\r\n          setPrices(response.data)\r\n        })\r\n    }\r\n    else {\r\n      priceService\r\n        .getAllFromSet(setId)\r\n        .then(response => {\r\n          setPrices(response.data)\r\n        })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n      const loggedUserJSON = window.localStorage.getItem(LOCAL_STORAGE_ID)\r\n      if(loggedUserJSON) {\r\n          const user = JSON.parse(loggedUserJSON)\r\n          setUser(user)\r\n          listService.setToken(user.token)\r\n      }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getAllPricesFromSet(2594)\r\n    getAllGroups()\r\n    metaService.getLastUpdated().then(response => setLastUpdated(response.data.lastUpdated))\r\n  }, [])\r\n\r\n  const changeGroup = (groupId) => {\r\n    getAllPricesFromSet(groupId)\r\n    document.getElementById('set-selector').value = groupId\r\n  }\r\n\r\n  let totalMarketValue = 0\r\n  for(let k = 0; k < prices.length; k++) {\r\n    totalMarketValue += prices[k].currentMarketPrice\r\n  }\r\n\r\n\r\n  return (\r\n    <div align=\"center\">\r\n      <h1>Current Market Prices</h1>\r\n        <div>\r\n          {user ? \"Logged in as: \" + user.username : <br/>}<br/><br/>\r\n          Last updated: {lastUpdated}\r\n        </div>   \r\n        <select id=\"set-selector\" name=\"sets\" onChange={(event) => changeGroup(event.target.value)}>\r\n          {groups.map(group => \r\n            <option value={group.groupId} key={group.groupId}>\r\n              {group.groupName}\r\n            </option>\r\n          )}\r\n          <option value={0} key={0}>\r\n            All cards (slow!)\r\n          </option>\r\n        </select>\r\n      <PriceTable user={user} products={prices} isWatchlist={false}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Prices","import React from 'react'\r\n\r\nconst FAQ = () => {\r\n    return (\r\n        <div>\r\n            <h1>FAQ</h1>\r\n            <h3>What does this site have?</h3>\r\n            <p>\r\n                This site collates the TCGPlayer market price data for English Pokémon cards to allow for easier visibility of multiple prices at once. It also allows for users to see the general market value of their collection, or of cards that they are looking to buy in the future, and view the short-term changes of price data.\r\n                <br/><br/>\r\n                Market price data is updated weekly, and the value for the previous week is kept to show the price/percentage difference.\r\n            </p>\r\n            <h3>What does this site not have?</h3>\r\n            <p>\r\n                This site does not contain data for\r\n                <ul>\r\n                    <li>graded cards</li>\r\n                    <li>Japanese cards</li>\r\n                    <li>sealed products</li>\r\n                    <li>any non-Pokémon products</li>\r\n                </ul>\r\n                \r\n                Also, due to technical reasons we do not differentiate between reverse-holo and normal prices. For the very small handful of cards this makes a difference for, you should probably be doing your own external research anyway.\r\n                This may or may not change in the future.\r\n            </p>\r\n            <h3>What are market prices?</h3>\r\n            <p>\r\n                Market prices are calculated by TCGPlayer based on the sales that take place through their platform. They serve as a good indicator as to what people are willing to pay for a card.\r\n                <br/><br/>\r\n                Market prices do not seem to take condition into account. Generally, even more expensive modern cards will be much more available as near-mint copies, so the market price will hover around there. But for older cards, the near-mint copies will be rarer and more people will settle for lightly played or similar, having to pay a premium for near mint. So if you only want near-mint cards, market prices are more accurate for modern cards than they are for older cards.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FAQ","import axios from 'axios'\r\nconst baseUrl = '/login'\r\n\r\nconst login = async credentials => {\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}\r\n\r\nexport default { login }","import React, {useEffect, useState} from 'react'\r\nimport listService from '../services/listService'\r\nimport loginService from '../services/loginService'\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [user, setUser] = useState(null)\r\n    \r\n    const LOCAL_STORAGE_ID = 'loggedInGxUser'\r\n\r\n    useEffect(() => {\r\n      const loggedUserJSON = window.localStorage.getItem(LOCAL_STORAGE_ID)\r\n      if(loggedUserJSON) {\r\n          const user = JSON.parse(loggedUserJSON)\r\n          setUser(user)\r\n          listService.setToken(user.token)\r\n      }\r\n    }, [])\r\n\r\n    const handleLogin = async (event) => {\r\n        event.preventDefault()\r\n        try {\r\n          const user = await loginService.login({\r\n            username, password,\r\n          })\r\n    \r\n          window.localStorage.setItem(\r\n              LOCAL_STORAGE_ID, JSON.stringify(user)\r\n          )\r\n\r\n          listService.setToken(user.token)\r\n          setUser(user)\r\n          setUsername('')\r\n          setPassword('')\r\n        } catch (exception) {\r\n          console.log(exception)\r\n        }\r\n      }\r\n\r\n    const logout = () => {\r\n      setUser(null)\r\n      window.localStorage.clear()\r\n    }\r\n     \r\n    const loginForm = () => {\r\n      return (\r\n        <form onSubmit={handleLogin}>\r\n          <div>\r\n            username\r\n              <input type=\"text\" value={username} name=\"Username\" onChange={({ target }) => setUsername(target.value)}/> \r\n          </div>  \r\n          <div>\r\n            password\r\n              <input type=\"text\" value={password} name=\"Password\" onChange={({ target }) => setPassword(target.value)}/>\r\n          </div>    \r\n          <button type=\"submit\">login</button>\r\n        </form>\r\n      )\r\n    }\r\n\r\n    const logoutForm = () => {\r\n      return (\r\n        <div>\r\n          Logged in as {user.username}\r\n          <button onClick={() => logout()}>Logout</button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {user ? logoutForm() : loginForm()}\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default LoginForm","import axios from 'axios'\r\nconst baseUrl = '/users'\r\n\r\nconst getUser = (userId) => {\r\n  return axios.get(baseUrl + '/' + userId)\r\n}\r\n\r\nexport default {\r\n  getUser\r\n}\r\n","import React, {useState} from 'react';\r\nimport Modal from './Modal.js'\r\nimport listService from '../services/listService'\r\n\r\nconst WatchlistTable = ({user, watchlistEntries}) => {\r\n\r\n    const [sortConfig, setSortConfig] = useState({\r\n        key: 'cardNumber',\r\n        direction: 'ascending'\r\n    })\r\n    const [show, setShow] = useState(false)\r\n    const [selectedProduct, setSelectedProduct] = useState({})\r\n   \r\n    if(!watchlistEntries) {\r\n      return null\r\n    }\r\n\r\n    const hideModal = () => {\r\n      setShow(false)\r\n    }\r\n\r\n    const requestSort = key => {\r\n        let direction = 'ascending'\r\n        if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n          direction = 'descending'\r\n        }\r\n\r\n        let newConfig = {\r\n            key: key,\r\n            direction: direction\r\n        }\r\n        setSortConfig(newConfig)\r\n    }\r\n/*\r\n    const AddButtonColumn = (productId) => {\r\n      if(isWatchlist || !user) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <td>\r\n          <button onClick={() => listService.pushToWatchlist(user.id, productId)}>\r\n            Add\r\n          </button>\r\n        </td>\r\n      )\r\n    }\r\n*/\r\n    const DeleteButtonColumn = (productId) => {\r\n      if(!user) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <td>\r\n          <button onClick={() => listService.deleteFromWatchlist(user.id, productId)}>\r\n            Delete\r\n          </button>\r\n        </td>\r\n      )\r\n    }\r\n\r\n    //All-purpose method that can compare string and integer numbers\r\n    //Used to ensure that '10' comes before '2' for example, which doesn't happen with lexicographical comaprison\r\n    //Also handles strings that simply contain numbers (e.g. 1/202)\r\n    const compareNumbers = (a, b) => {\r\n        if(typeof a === 'string' && typeof b === 'string') {\r\n            return a.localeCompare(b, undefined, {numeric: true, sensitivity: 'base'})\r\n        }\r\n        else {\r\n            if (a > b) {\r\n                return 1\r\n            }\r\n            else if(a < b) {\r\n                return -1\r\n            }\r\n            else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    const Difference = ({product}) => {\r\n      let difference = (product.currentMarketPrice - product.previousMarketPrice).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}\r\n        </font>\r\n      )\r\n    }\r\n\r\n    const PercentDifference = ({product}) => {\r\n      let difference = (((product.currentMarketPrice - product.previousMarketPrice)/product.previousMarketPrice) * 100).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}%\r\n        </font>\r\n      )\r\n    }\r\n\r\n    let sortedWatchlistEntries = [...watchlistEntries]\r\n    \r\n    if (sortConfig !== null) {\r\n\r\n      let aValue = null\r\n      let bValue = null      \r\n\r\n      sortedWatchlistEntries.sort((a, b) => {  \r\n\r\n        if (sortConfig.key === 'difference') {\r\n          aValue = a['currentMarketPrice'] - a['previousMarketPrice']\r\n          bValue = b['currentMarketPrice'] - b['previousMarketPrice']\r\n        }\r\n        else if(sortConfig.key === 'percentDifference') {\r\n          aValue = (a['currentMarketPrice'] - a['previousMarketPrice'])/a['previousMarketPrice']\r\n          bValue = (b['currentMarketPrice'] - b['previousMarketPrice'])/b['previousMarketPrice']\r\n        }\r\n        else {\r\n          aValue = a[sortConfig.key]\r\n          bValue = b[sortConfig.key]\r\n        }\r\n\r\n        //Null values (unnumbered cards or empty prices) go to the end regardless of sort order      \r\n        if(aValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? 1 : -1\r\n           return 1\r\n        }\r\n        else if(bValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? -1 : 1\r\n           return -1\r\n        }\r\n\r\n        let comparisonResult = compareNumbers(aValue, bValue)\r\n        if (comparisonResult < 0) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1\r\n        } else if (comparisonResult > 0) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1\r\n        } else {\r\n        return 0\r\n        }\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <Modal product={selectedProduct} show={show} handleClose={hideModal}/>\r\n        <table class=\"price-list-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('name')}>\r\n                  Name\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('cardNumber')}>\r\n                  Number\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('currentMarketPrice')}>\r\n                  Price\r\n                </button>\r\n              </th>        \r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('difference')}>\r\n                  Week Change\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('percentDifference')}>\r\n                  Week Change (%)\r\n                </button>\r\n              </th>\r\n              <th>\r\n                Quantity\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedWatchlistEntries.map(watchlistEntry => (\r\n              <tr key={watchlistEntry.product.productId}>\r\n                <td>\r\n                  <button onClick={() => {\r\n                  setSelectedProduct(watchlistEntry.product)\r\n                  setShow(true)\r\n                }}>{watchlistEntry.product.name}</button>\r\n                </td>\r\n                <td>{watchlistEntry.product.cardNumber}</td>\r\n                <td>{watchlistEntry.product.currentMarketPrice}</td>\r\n                <td><Difference product={watchlistEntry.product}/></td>\r\n                <td><PercentDifference product={watchlistEntry.product}/></td>\r\n                <td>{watchlistEntry.quantity}</td>\r\n                <DeleteButtonColumn productId={watchlistEntry.product._id}/>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default WatchlistTable\r\n","import React, {useState, useEffect} from 'react'\r\nimport listService from '../services/listService'\r\nimport userService from '../services/userService'\r\nimport WatchlistTable from './WatchlistTable'\r\n\r\nconst Watchlist = () => {\r\n    const [user, setUser] = useState(null)\r\n    const [watchlist, setWatchlist] = useState([])\r\n\r\n    const LOCAL_STORAGE_ID = 'loggedInGxUser'\r\n\r\n    const getWatchlist = (userId) => {\r\n        userService\r\n            .getUser(userId)\r\n            .then(response => {\r\n                setWatchlist(response.data.watchlist)\r\n            })\r\n      }\r\n\r\n    useEffect(() => {\r\n        const loggedUserJSON = window.localStorage.getItem(LOCAL_STORAGE_ID)\r\n        if(loggedUserJSON) {\r\n            const user = JSON.parse(loggedUserJSON)\r\n            setUser(user)\r\n            getWatchlist(user.id)\r\n            listService.setToken(user.token)\r\n        }\r\n    }, [])\r\n\r\n    const watchlistTable = () => {\r\n        return <WatchlistTable user={user} watchlistEntries={watchlist}/>\r\n    }\r\n\r\n    return (\r\n        <div align=\"center\">\r\n            <h1>Watchlist</h1>\r\n            {user ? watchlistTable() : <br/>}\r\n        </div>\r\n    )\r\n    \r\n      \r\n}\r\n\r\nexport default Watchlist","import React, {useState, useEffect} from 'react';\r\nimport Modal from './Modal.js'\r\nimport listService from '../services/listService'\r\nimport userService from '../services/userService'\r\n\r\nconst CollectionTable = ({user}) => {\r\n\r\n    const [sortConfig, setSortConfig] = useState({\r\n        key: 'cardNumber',\r\n        direction: 'ascending'\r\n    })\r\n    const [show, setShow] = useState(false)\r\n    const [selectedProduct, setSelectedProduct] = useState({})\r\n    const [collectionEntries, setCollectionEntries] = useState([])\r\n\r\n    useEffect(() => {\r\n      getCollectionEntries(user.id)\r\n    }, [])\r\n  \r\n\r\n    if(!collectionEntries) {\r\n      return null\r\n    }\r\n\r\n    const getCollectionEntries = (userId) => {\r\n      userService\r\n          .getUser(userId)\r\n          .then(response => {\r\n              setCollectionEntries(response.data.ownedProducts)\r\n          })\r\n    }\r\n\r\n  \r\n    const hideModal = () => {\r\n      setShow(false)\r\n    }\r\n\r\n    const requestSort = key => {\r\n        let direction = 'ascending'\r\n        if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n          direction = 'descending'\r\n        }\r\n\r\n        let newConfig = {\r\n            key: key,\r\n            direction: direction\r\n        }\r\n        setSortConfig(newConfig)\r\n    }\r\n\r\n    const DeleteButtonColumn = (productId) => {\r\n      if(!user) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <td>\r\n          <button onClick={() => deleteProduct(productId)}>\r\n            Delete\r\n          </button>\r\n        </td>\r\n      )\r\n    }\r\n\r\n    const IncrementDecrementColumn = (productId) => {\r\n      if(!user) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <td>\r\n          <button onClick={() => increment(productId)}>\r\n            ^\r\n          </button><br/>\r\n          <button onClick={() => decrement(productId)}>\r\n            v\r\n          </button>\r\n        </td>\r\n      )\r\n    }\r\n\r\n    const increment = async (productId) => {\r\n      if(!user) {\r\n        return null\r\n      }\r\n\r\n       await listService.increment(user.id, productId)\r\n       getCollectionEntries(user.id)\r\n    }\r\n\r\n    const decrement = async (productId) => {\r\n      if(!user) {\r\n        return null\r\n      }\r\n\r\n       await listService.decrement(user.id, productId)\r\n       getCollectionEntries(user.id)\r\n    }\r\n\r\n    const deleteProduct = async (productId) => {\r\n        if(!user) {\r\n            return null\r\n        }\r\n\r\n        await listService.deleteFromCollection(user.id, productId)\r\n        getCollectionEntries(user.id)\r\n    }\r\n\r\n    //All-purpose method that can compare string and integer numbers\r\n    //Used to ensure that '10' comes before '2' for example, which doesn't happen with lexicographical comaprison\r\n    //Also handles strings that simply contain numbers (e.g. 1/202)\r\n    const compareNumbers = (a, b) => {\r\n        if(typeof a === 'string' && typeof b === 'string') {\r\n            return a.localeCompare(b, undefined, {numeric: true, sensitivity: 'base'})\r\n        }\r\n        else {\r\n            if (a > b) {\r\n                return 1\r\n            }\r\n            else if(a < b) {\r\n                return -1\r\n            }\r\n            else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    const Difference = ({product}) => {\r\n      if(!product) {\r\n          return null\r\n      }\r\n      let difference = (product.currentMarketPrice - product.previousMarketPrice).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}\r\n        </font>\r\n      )\r\n    }\r\n\r\n    const PercentDifference = ({product}) => {\r\n      if(!product) {\r\n            return null\r\n      }\r\n      let difference = (((product.currentMarketPrice - product.previousMarketPrice)/product.previousMarketPrice) * 100).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}%\r\n        </font>\r\n      )\r\n    }\r\n\r\n    const DifferenceFormat = ({value}) => {\r\n        let difference = value.toFixed(2)\r\n        let color = 'black'\r\n        if(difference < 0) {\r\n          color = 'red'\r\n        }\r\n        else if(difference > 0) {\r\n          color = 'green'\r\n          difference = '+' + difference\r\n        }\r\n  \r\n        return (\r\n          <font color={color}>\r\n            {difference}\r\n          </font>\r\n        )\r\n      }\r\n  \r\n      const PercentDifferenceFormat = ({value}) => {\r\n    \r\n        let difference = value.toFixed(2)\r\n        let color = 'black'\r\n        if(difference < 0) {\r\n          color = 'red'\r\n        }\r\n        else if(difference > 0) {\r\n          color = 'green'\r\n          difference = '+' + difference\r\n        }\r\n  \r\n        return (\r\n          <font color={color}>\r\n            {difference}%\r\n          </font>\r\n        )\r\n      }\r\n  \r\n\r\n    let sortedCollectionEntries = [...collectionEntries]\r\n    \r\n    if (sortConfig !== null) {\r\n\r\n      let aValue = null\r\n      let bValue = null      \r\n\r\n      sortedCollectionEntries.sort((a, b) => {  \r\n         \r\n        let aProduct = a.product\r\n        let bProduct = b.product\r\n\r\n        if (sortConfig.key === 'difference') {\r\n          aValue = aProduct['currentMarketPrice'] - aProduct['previousMarketPrice']\r\n          bValue = bProduct['currentMarketPrice'] - bProduct['previousMarketPrice']\r\n        }\r\n        else if(sortConfig.key === 'percentDifference') {\r\n          aValue = (aProduct['currentMarketPrice'] - aProduct['previousMarketPrice'])/aProduct['previousMarketPrice']\r\n          bValue = (bProduct['currentMarketPrice'] - bProduct['previousMarketPrice'])/bProduct['previousMarketPrice']\r\n        }\r\n        else {\r\n          aValue = aProduct[sortConfig.key]\r\n          bValue = bProduct[sortConfig.key]\r\n        }\r\n\r\n        //Null values (unnumbered cards or empty prices) go to the end regardless of sort order      \r\n        if(aValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? 1 : -1\r\n           return 1\r\n        }\r\n        else if(bValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? -1 : 1\r\n           return -1\r\n        }\r\n\r\n        let comparisonResult = compareNumbers(aValue, bValue)\r\n        if (comparisonResult < 0) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1\r\n        } else if (comparisonResult > 0) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1\r\n        } else {\r\n        return 0\r\n        }\r\n      })\r\n    }\r\n    \r\n\r\n\r\n    const calculateTotals = (collectionEntries) => {\r\n        let totalPrice = 0\r\n        let totalPreviousPrice = 0\r\n        let netChange = 0\r\n\r\n        for(let k = 0; k < collectionEntries.length; k++) {\r\n            const currentProduct = collectionEntries[k].product\r\n            const currentQuantity = collectionEntries[k].quantity\r\n\r\n            totalPrice += currentProduct.currentMarketPrice * currentQuantity\r\n            totalPreviousPrice += currentProduct.previousMarketPrice * currentQuantity\r\n        }\r\n\r\n        netChange = totalPrice - totalPreviousPrice\r\n        let percentageChange = netChange / totalPreviousPrice * 100\r\n\r\n        return {\r\n            totalPrice,\r\n            netChange,\r\n            percentageChange\r\n        }\r\n    }\r\n\r\n    let totals = calculateTotals(sortedCollectionEntries)\r\n\r\n    return (\r\n      <div>\r\n        <Modal product={selectedProduct} show={show} handleClose={hideModal}/>\r\n        <table class=\"price-list-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('name')}>\r\n                  Name\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('cardNumber')}>\r\n                  Number\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('currentMarketPrice')}>\r\n                  Unit Price\r\n                </button>\r\n              </th>        \r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('difference')}>\r\n                  Week Change\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('percentDifference')}>\r\n                  Week Change (%)\r\n                </button>\r\n              </th>\r\n              <th colspan=\"2\">\r\n                Quantity\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedCollectionEntries.map(collectionEntry => (\r\n              <tr key={collectionEntry.product.productId}>\r\n                <td>\r\n                  <button onClick={() => {\r\n                  setSelectedProduct(collectionEntry.product)\r\n                  setShow(true)\r\n                }}>{collectionEntry.product.name}</button>\r\n                </td>\r\n                <td>{collectionEntry.product.cardNumber}</td>\r\n                <td>{collectionEntry.product.currentMarketPrice}</td>\r\n                <td><Difference product={(collectionEntry.product)}/></td>\r\n                <td><PercentDifference product={(collectionEntry.product)}/></td>\r\n                <td>{collectionEntry.quantity}</td>\r\n                <IncrementDecrementColumn productId={collectionEntry.product._id}/>\r\n                <DeleteButtonColumn productId={collectionEntry.product._id}/>\r\n              </tr>\r\n            ))}\r\n            <tr key={0}>\r\n                <td colspan=\"2\">\r\n                    Totals\r\n                </td>                \r\n                <td>\r\n                    {totals.totalPrice.toFixed(2)}\r\n                </td>\r\n                <td>\r\n                    <DifferenceFormat value={totals.netChange}/>\r\n                </td>\r\n                <td>\r\n                    <PercentDifferenceFormat value={totals.percentageChange}/>\r\n                </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CollectionTable\r\n","import React, {useState, useEffect} from 'react'\r\nimport listService from '../services/listService'\r\nimport userService from '../services/userService'\r\nimport CollectionTable from './CollectionTable'\r\n\r\nconst Collection = () => {\r\n    const [user, setUser] = useState(null)\r\n    const [ownedProducts, setOwnedProducts] = useState([])\r\n    const LOCAL_STORAGE_ID = 'loggedInGxUser'\r\n\r\n    const getOwnedProducts = (userId) => {\r\n        userService\r\n            .getUser(userId)\r\n            .then(response => {\r\n                setOwnedProducts(response.data.ownedProducts)\r\n            })\r\n      }\r\n\r\n    useEffect(() => {\r\n        const loggedUserJSON = window.localStorage.getItem(LOCAL_STORAGE_ID)\r\n        if(loggedUserJSON) {\r\n            const user = JSON.parse(loggedUserJSON)\r\n            setUser(user)\r\n            getOwnedProducts(user.id)\r\n            listService.setToken(user.token)\r\n        }\r\n    }, [])\r\n\r\n    const collectionTable = () => {\r\n        return <CollectionTable user={user} collectionEntries={ownedProducts}/>\r\n    }\r\n\r\n    return (\r\n        <div align=\"center\">\r\n            <h1>Collection</h1>\r\n            {user ? collectionTable() : <br/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Collection","import React from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\nimport Prices from './components/Prices'\nimport FAQ from './components/FAQ'\nimport LoginForm from './components/LoginForm'\nimport Watchlist from './components/Watchlist'\nimport Collection from './components/Collection'\nimport './components/App.css'\nfunction Navbar() {\n  return (\n    <div>\n      <Link to=\"/\">Prices</Link> &nbsp;\n      <Link to=\"/faq\">FAQ</Link> &nbsp;\n      <Link to=\"/login\">Login</Link> &nbsp;\n      <Link to=\"/watchlist\">Watchlist</Link> &nbsp;\n      <Link to=\"/collection\">Collection</Link>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <main>\n      {Navbar()}\n      <Switch>\n        <Route path=\"/\" component={Prices} exact />\n        <Route path=\"/faq\" component={FAQ} />\n        <Route path=\"/login\" component={LoginForm} />\n        <Route path=\"/watchlist\" component={Watchlist} />\n        <Route path=\"/collection\" component={Collection} />\n      </Switch>\n    </main>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}