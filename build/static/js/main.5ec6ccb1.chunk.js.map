{"version":3,"sources":["services/priceService.js","services/groupService.js","services/loginService.js","services/metaService.js","services/userService.js","components/Modal.js","components/PriceTable.js","components/Prices.js","components/FAQ.js","components/LoginForm.js","App.js","index.js"],"names":["axios","get","setId","baseUrl","login","credentials","a","post","response","data","userId","Modal","product","handleClose","showHideClassName","show","className","rowspan","class","src","imageUrl","name","group","groupName","cardNumber","cardRarity","currentMarketPrice","href","storeUrl","onClick","PriceTable","products","useState","key","direction","sortConfig","setSortConfig","setShow","selectedProduct","setSelectedProduct","requestSort","Difference","difference","previousMarketPrice","toFixed","color","PercentDifference","sortedProducts","aValue","bValue","sort","b","comparisonResult","localeCompare","undefined","numeric","sensitivity","compareNumbers","type","map","productId","compare","Prices","prices","setPrices","watchlist","setWatchlist","setGroup","groups","setGroups","user","setUser","lastUpdated","setLastUpdated","getAllPricesFromSet","console","log","priceService","then","useEffect","loggedUserJSON","window","localStorage","getItem","JSON","parse","id","userService","groupService","metaService","k","length","align","username","onChange","event","groupId","target","value","document","getElementById","FAQ","LoginForm","setUsername","password","setPassword","handleLogin","preventDefault","loginService","setItem","stringify","onSubmit","App","to","path","component","exact","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5ec6ccb1.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/products'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst getAllFromSet = (setId) => {\r\n  return axios.get(baseUrl + '/group/' + setId)\r\n}\r\n\r\nconst getAllPricesFromUser = (userId) => {\r\n  return axios.get('/users/' + userId)\r\n}\r\nexport default {\r\n  getAll,\r\n  getAllFromSet,\r\n  getAllPricesFromUser\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = '/groups'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nexport default {\r\n  getAll\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = '/login'\r\n\r\nconst login = async credentials => {\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}\r\n\r\nexport default { login }","import axios from 'axios'\r\nconst baseUrl = '/meta'\r\n\r\nconst getLastUpdated = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nexport default {\r\n  getLastUpdated\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = '/users'\r\n\r\nconst getUser = (userId) => {\r\n  return axios.get(baseUrl + '/' + userId)\r\n}\r\n\r\nexport default {\r\n  getUser\r\n}\r\n","import React, {useState} from 'react'\r\nimport './Modal.css'\r\n\r\nconst Modal = ({product, handleClose, show }) => {\r\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n \r\n    return (\r\n      <div className={showHideClassName}>\r\n        <section className=\"modal-main\">\r\n          <div>\r\n            <table>\r\n              <tr>\r\n                <td rowspan=\"3\">\r\n                  <div class=\"product-image\">\r\n                    <img src={product.imageUrl}/>\r\n                  </div>\r\n                </td>      \r\n                <td>\r\n                  <div class=\"product-name\">\r\n                    {product.name}\r\n                  </div>\r\n                  <div class=\"product-info\">\r\n                    {product.group ? product.group.groupName : 'Set Name Not Found'}\r\n                  </div>\r\n                  <div class=\"product-info\">\r\n                    {product.cardNumber}\r\n                  </div>\r\n                  <div class=\"product-info\">\r\n                    {product.cardRarity}\r\n                  </div>\r\n                </td>          \r\n              </tr>\r\n              <tr>\r\n                <div class=\"product-info\">\r\n                  Market Price: {product.currentMarketPrice}\r\n                </div>               \r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <a href={product.storeUrl}>TCGPlayer prices</a>\r\n                </td>\r\n              </tr>\r\n            </table>\r\n              \r\n          </div>  \r\n          <button onClick={handleClose}>close</button>\r\n        </section>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\nexport default Modal","import React, {useState, useEffect} from 'react';\r\nimport Modal from './Modal.js'\r\n\r\nconst PriceTable = ({products}) => {\r\n\r\n    const [sortConfig, setSortConfig] = useState({\r\n        key: 'cardNumber',\r\n        direction: 'ascending'\r\n    })\r\n    const [show, setShow] = useState(false)\r\n    const [selectedProduct, setSelectedProduct] = useState({})\r\n   \r\n\r\n    if(!products) {\r\n      return <br/>\r\n    }\r\n\r\n    const showModal = () => {\r\n      setShow(true)\r\n    }\r\n  \r\n    const hideModal = () => {\r\n      setShow(false)\r\n    }\r\n\r\n    const deriveButtonLabel = ({name, field}) => {        \r\n        if(field === sortConfig.key) {\r\n            let toAdd = sortConfig.direction === 'ascending' ? '^' : 'v'\r\n            return name + ' ' + toAdd\r\n        }\r\n        return name\r\n    }\r\n\r\n    const requestSort = key => {\r\n        let direction = 'ascending'\r\n        if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n          direction = 'descending'\r\n        }\r\n\r\n        let newConfig = {\r\n            key: key,\r\n            direction: direction\r\n        }\r\n        setSortConfig(newConfig)\r\n    }\r\n\r\n    //All-purpose method that can compare string and integer numbers\r\n    //Used to ensure that '10' comes before '2' for example, which doesn't happen with lexicographical comaprison\r\n    //Also handles strings that simply contain numbers (e.g. 1/202)\r\n    const compareNumbers = (a, b) => {\r\n        if(typeof a === 'string' && typeof b === 'string') {\r\n            return a.localeCompare(b, undefined, {numeric: true, sensitivity: 'base'})\r\n        }\r\n        else {\r\n            if (a > b) {\r\n                return 1\r\n            }\r\n            else if(a < b) {\r\n                return -1\r\n            }\r\n            else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    const Difference = ({product}) => {\r\n      let difference = (product.currentMarketPrice - product.previousMarketPrice).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}\r\n        </font>\r\n      )\r\n    }\r\n\r\n    const PercentDifference = ({product}) => {\r\n      let difference = (((product.currentMarketPrice - product.previousMarketPrice)/product.previousMarketPrice) * 100).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}%\r\n        </font>\r\n      )\r\n    }\r\n\r\n    let sortedProducts = [...products]\r\n    \r\n    if (sortConfig !== null) {\r\n\r\n      let aValue = null\r\n      let bValue = null      \r\n\r\n      sortedProducts.sort((a, b) => {  \r\n\r\n        if (sortConfig.key === 'difference') {\r\n          aValue = a['currentMarketPrice'] - a['previousMarketPrice']\r\n          bValue = b['currentMarketPrice'] - b['previousMarketPrice']\r\n        }\r\n        else if(sortConfig.key === 'percentDifference') {\r\n          aValue = (a['currentMarketPrice'] - a['previousMarketPrice'])/a['previousMarketPrice']\r\n          bValue = (b['currentMarketPrice'] - b['previousMarketPrice'])/b['previousMarketPrice']\r\n        }\r\n        else {\r\n          aValue = a[sortConfig.key]\r\n          bValue = b[sortConfig.key]\r\n        }\r\n\r\n        //Null values (unnumbered cards or empty prices) go to the end regardless of sort order      \r\n        if(aValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? 1 : -1\r\n           return 1\r\n        }\r\n        else if(bValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? -1 : 1\r\n           return -1\r\n        }\r\n\r\n        let comparisonResult = compareNumbers(aValue, bValue)\r\n        if (comparisonResult < 0) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1\r\n        } else if (comparisonResult > 0) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1\r\n        } else {\r\n        return 0\r\n        }\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <Modal product={selectedProduct} show={show} handleClose={hideModal}/>\r\n        <table class=\"price-list-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('name')}>\r\n                  Name\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('cardNumber')}>\r\n                  Number\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('currentMarketPrice')}>\r\n                  Price\r\n                </button>\r\n              </th>        \r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('difference')}>\r\n                  Week Change\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('percentDifference')}>\r\n                  Week Change (%)\r\n                </button>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedProducts.map(product => (\r\n              <tr key={product.productId}>\r\n                <td>\r\n                  <button onClick={() => {\r\n                  setSelectedProduct(product)\r\n                  setShow(true)\r\n                }}>{product.name}</button>\r\n                </td>\r\n                <td>{product.cardNumber}</td>\r\n                <td>{product.currentMarketPrice}</td>\r\n                <td><Difference product={product}/></td>\r\n                <td><PercentDifference product={product}/></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PriceTable\r\n","import React, {useState, useEffect} from 'react'\r\nimport priceService from '../services/priceService'\r\nimport groupService from '../services/groupService'\r\nimport loginService from '../services/loginService'\r\nimport metaService from '../services/metaService'\r\nimport userService from '../services/userService'\r\nimport PriceTable  from './PriceTable'\r\n\r\nconst compare = (a, b) => {\r\n  if (a.groupName < b.groupName) {\r\n    return -1;\r\n  }\r\n  if (a.groupName > b.groupName) {\r\n    return 1;\r\n  }\r\n  // a must be equal to b\r\n  return 0;\r\n}\r\n\r\nconst Prices = () => {\r\n  const [prices, setPrices] = useState([])\r\n  const [watchlist, setWatchlist] = useState([])\r\n  const [group, setGroup] = useState(0)\r\n  const [groups, setGroups] = useState([])\r\n  \r\n  const [user, setUser] = useState(null)\r\n  const [lastUpdated, setLastUpdated] = useState(null)\r\n\r\n  const LOCAL_STORAGE_ID = 'loggedInGxUser'\r\n\r\n  const getAllPricesFromUser = (userId) => {\r\n    userService\r\n        .getUser(userId)\r\n        .then(response => {\r\n            setWatchlist(response.data.watchlist)\r\n        })\r\n  }\r\n\r\n  const getAllGroups = () => {\r\n    groupService\r\n        .getAll()\r\n        .then(response => {\r\n          setGroups(response.data.sort(compare))\r\n        })\r\n  }\r\n\r\n  const getAllPricesFromSet = (setId) => {\r\n    console.log(setId)\r\n    if(setId == 0) {\r\n      console.log(\"getting all\")\r\n      priceService\r\n        .getAll()\r\n        .then(response => {\r\n          setPrices(response.data)\r\n        })\r\n    }\r\n    else {\r\n      priceService\r\n        .getAllFromSet(setId)\r\n        .then(response => {\r\n          setPrices(response.data)\r\n        })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n      const loggedUserJSON = window.localStorage.getItem(LOCAL_STORAGE_ID)\r\n      if(loggedUserJSON) {\r\n          const user = JSON.parse(loggedUserJSON)\r\n          setUser(user)\r\n          getAllPricesFromUser(user.id)\r\n      }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getAllPricesFromSet(2594)\r\n    getAllGroups()\r\n    metaService.getLastUpdated().then(response => setLastUpdated(response.data.lastUpdated))\r\n  }, [])\r\n\r\n  const changeGroup = (groupId) => {\r\n    setGroup(groupId)\r\n    getAllPricesFromSet(groupId)\r\n    document.getElementById('set-selector').value = groupId\r\n  }\r\n\r\n  let totalMarketValue = 0\r\n  for(let k = 0; k < prices.length; k++) {\r\n    totalMarketValue += prices[k].currentMarketPrice\r\n  }\r\n\r\n  const watchlistTable = () => {\r\n    return <PriceTable products={watchlist}/>\r\n  }\r\n\r\n  \r\n  return (\r\n    <div align=\"center\">\r\n      <h1>Current Market Prices</h1>\r\n        <div>\r\n          {user ? \"Logged in as: \" + user.username : <br/>}<br/><br/>\r\n          Last updated: {lastUpdated}\r\n        </div>\r\n        {user !== null && watchlistTable()}      \r\n        <select id=\"set-selector\" name=\"sets\" onChange={(event) => changeGroup(event.target.value)}>\r\n          {groups.map(group => \r\n            <option value={group.groupId} key={group.groupId}>\r\n              {group.groupName}\r\n            </option>\r\n          )}\r\n          <option value={0} key={0}>\r\n            All cards (slow!)\r\n          </option>\r\n        </select>\r\n      <PriceTable products={prices}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Prices","import React from 'react'\r\n\r\nconst FAQ = () => {\r\n    return (\r\n        <div>\r\n            <h1>FAQ</h1>\r\n            <h3>What does this site have?</h3>\r\n            <p>\r\n                This site collates the TCGPlayer market price data for English Pokémon cards to allow for easier visibility of multiple prices at once. It also allows for users to see the general market value of their collection, or of cards that they are looking to buy in the future, and view the short-term changes of price data.\r\n                <br/><br/>\r\n                Market price data is updated weekly, and the value for the previous week is kept to show the price/percentage difference.\r\n            </p>\r\n            <h3>What does this site not have?</h3>\r\n            <p>\r\n                This site does not contain data for\r\n                <ul>\r\n                    <li>graded cards</li>\r\n                    <li>Japanese cards</li>\r\n                    <li>sealed products</li>\r\n                    <li>any non-Pokémon products</li>\r\n                </ul>\r\n            </p>\r\n            <h3>What are market prices?</h3>\r\n            <p>\r\n                Market prices are calculated by TCGPlayer based on the sales that take place through their platform. They serve as a good indicator as to what people are willing to pay for a card.\r\n                <br/><br/>\r\n                Market prices do not seem to take condition into account. Generally, even more expensive modern cards will be much more available as near-mint copies, so the market price will hover around there. But for older cards, the near-mint copies will be rarer and more people will settle for lightly played or similar, having to pay a premium for near mint. So if you only want near-mint cards, market prices are more accurate for modern cards than they are for older cards.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FAQ","import React, {useState} from 'react'\r\nimport loginService from '../services/loginService'\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n\r\n    const LOCAL_STORAGE_ID = 'loggedInGxUser'\r\n    \r\n    const handleLogin = async (event) => {\r\n        event.preventDefault()\r\n        try {\r\n          const user = await loginService.login({\r\n            username, password,\r\n          })\r\n    \r\n          window.localStorage.setItem(\r\n              LOCAL_STORAGE_ID, JSON.stringify(user)\r\n          )\r\n          setUsername('')\r\n          setPassword('')\r\n        } catch (exception) {\r\n          console.log(exception)\r\n          console.log('Wrong credentials')\r\n        }\r\n      }\r\n      \r\n    return (\r\n      <form onSubmit={handleLogin}>\r\n        <div>\r\n          username\r\n            <input type=\"text\" value={username} name=\"Username\" onChange={({ target }) => setUsername(target.value)}/> \r\n        </div>  \r\n        <div>\r\n          password\r\n            <input type=\"text\" value={password} name=\"Password\" onChange={({ target }) => setPassword(target.value)}/>\r\n        </div>    \r\n        <button type=\"submit\">login</button>\r\n      </form>\r\n    )\r\n  }\r\n  \r\n  export default LoginForm","import React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\n\nimport Prices from './components/Prices'\nimport FAQ from './components/FAQ'\nimport LoginForm from './components/LoginForm'\n\nfunction Navbar() {\n  return (\n    <div>\n      <Link to=\"/\">Prices</Link> &nbsp;\n      <Link to=\"/faq\">FAQ</Link> &nbsp;\n      <Link to=\"/login\">Login</Link> \n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <main>\n      {Navbar()}\n      <Switch>\n        <Route path=\"/\" component={Prices} exact />\n        <Route path=\"/faq\" component={FAQ} />\n        <Route path=\"/login\" component={LoginForm} />\n      </Switch>\n    </main>\n  )\n}\nexport default App;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport FAQ from './components/FAQ';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}