{"version":3,"sources":["services/priceService.js","services/groupService.js","services/metaService.js","components/Modal.js","components/PriceTable.js","App.js","index.js"],"names":["baseUrl","getAll","axios","get","getAllFromSet","setId","Modal","product","handleClose","showHideClassName","show","className","rowspan","class","src","imageUrl","name","group","groupName","cardNumber","cardRarity","currentMarketPrice","href","storeUrl","onClick","PriceTable","products","useState","key","direction","sortConfig","setSortConfig","setShow","selectedProduct","setSelectedProduct","requestSort","Difference","difference","previousMarketPrice","toFixed","color","PercentDifference","sortedProducts","aValue","bValue","sort","a","b","comparisonResult","localeCompare","undefined","numeric","sensitivity","compareNumbers","type","map","productId","compare","App","prices","setPrices","setGroup","groups","setGroups","user","lastUpdated","setLastUpdated","getAllPricesFromSet","console","log","priceService","then","response","data","useEffect","groupService","metaService","k","length","align","id","onChange","event","groupId","target","value","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"yPACMA,EAAU,iCAcD,GACbC,OAba,WACb,OAAOC,IAAMC,IAAIH,IAajBI,cAVoB,SAACC,GACrB,OAAOH,IAAMC,IAAIH,EAAU,UAAYK,KCD1B,EAJA,WACb,OAAOH,IAAMC,IAHC,iCCMD,EAJQ,WACrB,OAAOD,IAAMC,IAHC,+B,QCmDDG,G,MAjDD,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,YACfC,EADuC,EAAXC,KACD,sBAAwB,qBAEzD,OACE,yBAAKC,UAAWF,GACd,6BAASE,UAAU,cACjB,6BACE,+BACE,4BACE,wBAAIC,QAAQ,KACV,yBAAKC,MAAM,iBACT,yBAAKC,IAAKP,EAAQQ,aAGtB,4BACE,yBAAKF,MAAM,gBACRN,EAAQS,MAEX,yBAAKH,MAAM,gBACRN,EAAQU,MAAQV,EAAQU,MAAMC,UAAY,sBAE7C,yBAAKL,MAAM,gBACRN,EAAQY,YAEX,yBAAKN,MAAM,gBACRN,EAAQa,cAIf,4BACE,yBAAKP,MAAM,gBAAX,iBACiBN,EAAQc,qBAG3B,4BACE,4BACE,uBAAGC,KAAMf,EAAQgB,UAAjB,wBAMR,4BAAQC,QAAShB,GAAjB,aCqJKiB,EA/LI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACKC,mBAAS,CACzCC,IAAK,aACLC,UAAW,cAHgB,mBACxBC,EADwB,KACZC,EADY,OAKPJ,oBAAS,GALF,mBAKxBjB,EALwB,KAKlBsB,EALkB,OAMeL,mBAAS,IANxB,mBAMxBM,EANwB,KAMPC,EANO,KAwBzBC,EAAc,SAAAP,GAChB,IAAIC,EAAY,YACZC,EAAWF,MAAQA,GAAgC,cAAzBE,EAAWD,YACvCA,EAAY,cAOdE,EAJgB,CACZH,IAAKA,EACLC,UAAWA,KAyBbO,EAAa,SAAC,GAAe,IAAd7B,EAAa,EAAbA,QACf8B,GAAc9B,EAAQc,mBAAqBd,EAAQ+B,qBAAqBC,QAAQ,GAChFC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,IAKDI,EAAoB,SAAC,GAAe,IAAdlC,EAAa,EAAbA,QACtB8B,IAAgB9B,EAAQc,mBAAqBd,EAAQ+B,qBAAqB/B,EAAQ+B,oBAAuB,KAAKC,QAAQ,GACtHC,EAAQ,QASZ,OARGH,EAAa,EACdG,EAAQ,MAEFH,EAAa,IACnBG,EAAQ,QACRH,EAAa,IAAMA,GAInB,0BAAMG,MAAOA,GACVH,EADH,MAMAK,EAAc,YAAOhB,GAGzB,GAAmB,OAAfI,EAAqB,CAEvB,IAAIa,EAAS,KACTC,EAAS,KAEbF,EAAeG,MAAK,SAACC,EAAGC,GAgBtB,GAduB,eAAnBjB,EAAWF,KACbe,EAASG,EAAC,mBAAyBA,EAAC,oBACpCF,EAASG,EAAC,mBAAyBA,EAAC,qBAEX,sBAAnBjB,EAAWF,KACjBe,GAAUG,EAAC,mBAAyBA,EAAC,qBAAyBA,EAAC,oBAC/DF,GAAUG,EAAC,mBAAyBA,EAAC,qBAAyBA,EAAC,sBAG/DJ,EAASG,EAAEhB,EAAWF,KACtBgB,EAASG,EAAEjB,EAAWF,MAIV,OAAXe,EAEA,OAAO,EAEL,GAAc,OAAXC,EAEL,OAAQ,EAGX,IAAII,EAtFe,SAACF,EAAGC,GACvB,MAAgB,kBAAND,GAA+B,kBAANC,EACxBD,EAAEG,cAAcF,OAAGG,EAAW,CAACC,SAAS,EAAMC,YAAa,SAG9DN,EAAIC,EACG,EAEHD,EAAIC,GACA,EAGD,EA0EQM,CAAeV,EAAQC,GAC9C,OAAII,EAAmB,EACW,cAAzBlB,EAAWD,WAA6B,EAAI,EAC1CmB,EAAmB,EACI,cAAzBlB,EAAWD,UAA4B,GAAK,EAE9C,KAKX,OACE,6BACE,kBAAC,EAAD,CAAOtB,QAAS0B,EAAiBvB,KAAMA,EAAMF,YA/H/B,WAChBwB,GAAQ,MA+HN,2BAAOnB,MAAM,oBACX,+BACE,4BACE,4BACE,4BAAQyC,KAAK,SAAS9B,QAAS,kBAAMW,EAAY,UAAjD,SAIF,4BACE,4BAAQmB,KAAK,SAAS9B,QAAS,kBAAMW,EAAY,gBAAjD,WAIF,4BACE,4BAAQmB,KAAK,SAAS9B,QAAS,kBAAMW,EAAY,wBAAjD,UAIF,4BACE,4BAAQmB,KAAK,SAAS9B,QAAS,kBAAMW,EAAY,gBAAjD,gBAIF,4BACE,4BAAQmB,KAAK,SAAS9B,QAAS,kBAAMW,EAAY,uBAAjD,sBAMN,+BACGO,EAAea,KAAI,SAAAhD,GAAO,OACzB,wBAAIqB,IAAKrB,EAAQiD,WACf,4BACE,4BAAQhC,QAAS,WACjBU,EAAmB3B,GACnByB,GAAQ,KACNzB,EAAQS,OAEZ,4BAAKT,EAAQY,YACb,4BAAKZ,EAAQc,oBACb,4BAAI,kBAACe,EAAD,CAAY7B,QAASA,KACzB,4BAAI,kBAACkC,EAAD,CAAmBlC,QAASA,aClL1CkD,EAAU,SAACX,EAAGC,GAClB,OAAID,EAAE5B,UAAY6B,EAAE7B,WACV,EAEN4B,EAAE5B,UAAY6B,EAAE7B,UACX,EAGF,GAwHMwC,EArHH,WAAO,IAAD,EACY/B,mBAAS,IADrB,mBACTgC,EADS,KACDC,EADC,OAEkBjC,mBAAS,IAF3B,gCAGUA,mBAAS,IAHnB,mBAGFkC,GAHE,aAIYlC,mBAAS,IAJrB,mBAITmC,EAJS,KAIDC,EAJC,OAKgBpC,mBAAS,IALzB,gCAMgBA,mBAAS,KANzB,gCAOQA,mBAAS,OAPjB,mBAOTqC,EAPS,aAQsBrC,mBAAS,OAR/B,mBAQTsC,EARS,KAQIC,EARJ,KAkCVC,EAAsB,SAAC9D,GAC3B+D,QAAQC,IAAIhE,GACA,GAATA,GACD+D,QAAQC,IAAI,eACZC,EACGrE,SACAsE,MAAK,SAAAC,GACJZ,EAAUY,EAASC,UAIvBH,EACGlE,cAAcC,GACdkE,MAAK,SAAAC,GACJZ,EAAUY,EAASC,UAU3BC,qBAAU,WACRP,EAAoB,MAhCpBQ,IAEKJ,MAAK,SAAAC,GACJT,EAAUS,EAASC,KAAK5B,KAAKY,OA+BnCmB,IAA6BL,MAAK,SAAAC,GAAQ,OAAIN,EAAeM,EAASC,KAAKR,kBAC1E,IASH,IAPA,IAOQY,EAAI,EAAGA,EAAIlB,EAAOmB,OAAQD,IACZlB,EAAOkB,GAAGxD,mBAuBhC,OACE,yBAAK0D,MAAM,UACT,qDACE,8CACiBd,GAEP,OAATD,GAzBE,6BA0BH,4BAAQgB,GAAG,eAAehE,KAAK,OAAOiE,SAAU,SAACC,GAAD,OAtCjCC,EAsCwDD,EAAME,OAAOC,MArCxFxB,EAASsB,GACThB,EAAoBgB,QACpBG,SAASC,eAAe,gBAAgBF,MAAQF,GAH9B,IAACA,IAuCZrB,EAAOP,KAAI,SAAAtC,GAAK,OACf,4BAAQoE,MAAOpE,EAAMkE,QAASvD,IAAKX,EAAMkE,SACtClE,EAAMC,cAGX,4BAAQmE,MAAO,EAAGzD,IAAK,GAAvB,sBAIJ,kBAAC,EAAD,CAAYF,SAAUiC,MC9H5B6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFJ,SAASC,eAAe,W","file":"static/js/main.d9a6d299.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/products'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst getAllFromSet = (setId) => {\r\n  return axios.get(baseUrl + '/group/' + setId)\r\n}\r\n\r\nconst getAllFromUser = (userId) => {\r\n  const user = axios.get('http://localhost:3001/users/' + userId)\r\n  return user.watchlist\r\n}\r\nexport default {\r\n  getAll,\r\n  getAllFromSet\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/groups'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nexport default {\r\n  getAll\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/meta'\r\n\r\nconst getLastUpdated = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nexport default {\r\n  getLastUpdated\r\n}\r\n","import React, {useState} from 'react'\r\nimport './Modal.css'\r\n\r\nconst Modal = ({product, handleClose, show }) => {\r\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n \r\n    return (\r\n      <div className={showHideClassName}>\r\n        <section className=\"modal-main\">\r\n          <div>\r\n            <table>\r\n              <tr>\r\n                <td rowspan=\"3\">\r\n                  <div class=\"product-image\">\r\n                    <img src={product.imageUrl}/>\r\n                  </div>\r\n                </td>      \r\n                <td>\r\n                  <div class=\"product-name\">\r\n                    {product.name}\r\n                  </div>\r\n                  <div class=\"product-info\">\r\n                    {product.group ? product.group.groupName : 'Set Name Not Found'}\r\n                  </div>\r\n                  <div class=\"product-info\">\r\n                    {product.cardNumber}\r\n                  </div>\r\n                  <div class=\"product-info\">\r\n                    {product.cardRarity}\r\n                  </div>\r\n                </td>          \r\n              </tr>\r\n              <tr>\r\n                <div class=\"product-info\">\r\n                  Market Price: {product.currentMarketPrice}\r\n                </div>               \r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <a href={product.storeUrl}>TCGPlayer prices</a>\r\n                </td>\r\n              </tr>\r\n            </table>\r\n              \r\n          </div>  \r\n          <button onClick={handleClose}>close</button>\r\n        </section>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\nexport default Modal","import React, {useState, useEffect} from 'react';\r\nimport Modal from './Modal.js'\r\n\r\nconst PriceTable = ({products}) => {\r\n    const [sortConfig, setSortConfig] = useState({\r\n        key: 'cardNumber',\r\n        direction: 'ascending'\r\n    })\r\n    const [show, setShow] = useState(false)\r\n    const [selectedProduct, setSelectedProduct] = useState({})\r\n\r\n    const showModal = () => {\r\n      setShow(true)\r\n    }\r\n  \r\n    const hideModal = () => {\r\n      setShow(false)\r\n    }\r\n\r\n    const deriveButtonLabel = ({name, field}) => {        \r\n        if(field === sortConfig.key) {\r\n            let toAdd = sortConfig.direction === 'ascending' ? '^' : 'v'\r\n            return name + ' ' + toAdd\r\n        }\r\n        return name\r\n    }\r\n\r\n    const requestSort = key => {\r\n        let direction = 'ascending'\r\n        if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n          direction = 'descending'\r\n        }\r\n\r\n        let newConfig = {\r\n            key: key,\r\n            direction: direction\r\n        }\r\n        setSortConfig(newConfig)\r\n    }\r\n\r\n    //All-purpose method that can compare string and integer numbers\r\n    //Used to ensure that '10' comes before '2' for example, which doesn't happen with lexicographical comaprison\r\n    //Also handles strings that simply contain numbers (e.g. 1/202)\r\n    const compareNumbers = (a, b) => {\r\n        if(typeof a === 'string' && typeof b === 'string') {\r\n            return a.localeCompare(b, undefined, {numeric: true, sensitivity: 'base'})\r\n        }\r\n        else {\r\n            if (a > b) {\r\n                return 1\r\n            }\r\n            else if(a < b) {\r\n                return -1\r\n            }\r\n            else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    const Difference = ({product}) => {\r\n      let difference = (product.currentMarketPrice - product.previousMarketPrice).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}\r\n        </font>\r\n      )\r\n    }\r\n\r\n    const PercentDifference = ({product}) => {\r\n      let difference = (((product.currentMarketPrice - product.previousMarketPrice)/product.previousMarketPrice) * 100).toFixed(2)\r\n      let color = 'black'\r\n      if(difference < 0) {\r\n        color = 'red'\r\n      }\r\n      else if(difference > 0) {\r\n        color = 'green'\r\n        difference = '+' + difference\r\n      }\r\n\r\n      return (\r\n        <font color={color}>\r\n          {difference}%\r\n        </font>\r\n      )\r\n    }\r\n\r\n    let sortedProducts = [...products]\r\n    \r\n    \r\n    if (sortConfig !== null) {\r\n\r\n      let aValue = null\r\n      let bValue = null      \r\n\r\n      sortedProducts.sort((a, b) => {  \r\n\r\n        if (sortConfig.key === 'difference') {\r\n          aValue = a['currentMarketPrice'] - a['previousMarketPrice']\r\n          bValue = b['currentMarketPrice'] - b['previousMarketPrice']\r\n        }\r\n        else if(sortConfig.key === 'percentDifference') {\r\n          aValue = (a['currentMarketPrice'] - a['previousMarketPrice'])/a['previousMarketPrice']\r\n          bValue = (b['currentMarketPrice'] - b['previousMarketPrice'])/b['previousMarketPrice']\r\n        }\r\n        else {\r\n          aValue = a[sortConfig.key]\r\n          bValue = b[sortConfig.key]\r\n        }\r\n\r\n        //Null values (unnumbered cards or empty prices) go to the end regardless of sort order      \r\n        if(aValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? 1 : -1\r\n           return 1\r\n        }\r\n        else if(bValue === null) {\r\n           //return sortConfig.direction === 'ascending' ? -1 : 1\r\n           return -1\r\n        }\r\n\r\n        let comparisonResult = compareNumbers(aValue, bValue)\r\n        if (comparisonResult < 0) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1\r\n        } else if (comparisonResult > 0) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1\r\n        } else {\r\n        return 0\r\n        }\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <Modal product={selectedProduct} show={show} handleClose={hideModal}/>\r\n        <table class=\"price-list-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('name')}>\r\n                  Name\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('cardNumber')}>\r\n                  Number\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('currentMarketPrice')}>\r\n                  Price\r\n                </button>\r\n              </th>        \r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('difference')}>\r\n                  Week Change\r\n                </button>\r\n              </th>\r\n              <th>\r\n                <button type=\"button\" onClick={() => requestSort('percentDifference')}>\r\n                  Week Change (%)\r\n                </button>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedProducts.map(product => (\r\n              <tr key={product.productId}>\r\n                <td>\r\n                  <button onClick={() => {\r\n                  setSelectedProduct(product)\r\n                  setShow(true)\r\n                }}>{product.name}</button>\r\n                </td>\r\n                <td>{product.cardNumber}</td>\r\n                <td>{product.currentMarketPrice}</td>\r\n                <td><Difference product={product}/></td>\r\n                <td><PercentDifference product={product}/></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PriceTable\r\n","import React, {useState, useEffect} from 'react'\nimport priceService from './services/priceService'\nimport groupService from './services/groupService'\nimport loginService from './services/loginService'\nimport metaService from './services/metaService'\nimport PriceTable  from './components/PriceTable'\n\nconst compare = (a, b) => {\n  if (a.groupName < b.groupName) {\n    return -1;\n  }\n  if (a.groupName > b.groupName) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n}\n\nconst App = () => {\n  const [prices, setPrices] = useState([])\n  const [watchlist, setWatchlist] = useState([])\n  const [group, setGroup] = useState(0)\n  const [groups, setGroups] = useState([])\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [user, setUser] = useState(null)\n  const [lastUpdated, setLastUpdated] = useState(null)\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      console.log(exception)\n      console.log('Wrong credentials')\n    }\n  }\n\n  const getAllGroups = () => {\n    groupService\n        .getAll()\n        .then(response => {\n          setGroups(response.data.sort(compare))\n        })\n  }\n\n  const getAllPricesFromSet = (setId) => {\n    console.log(setId)\n    if(setId == 0) {\n      console.log(\"getting all\")\n      priceService\n        .getAll()\n        .then(response => {\n          setPrices(response.data)\n        })\n    }\n    else {\n      priceService\n        .getAllFromSet(setId)\n        .then(response => {\n          setPrices(response.data)\n        })\n    }\n  }\n\n  const getAllPricesFromUser = (userId) => {\n    priceService.getAllPricesFromUser(userId)\n    .then(response => setWatchlist(response.data))\n  }\n\n  useEffect(() => {\n    getAllPricesFromSet(2594)\n    getAllGroups()\n    metaService.getLastUpdated().then(response => setLastUpdated(response.data.lastUpdated))\n  }, [])\n\n  const changeGroup = (groupId) => {\n    setGroup(groupId)\n    getAllPricesFromSet(groupId)\n    document.getElementById('set-selector').value = groupId\n  }\n\n  let totalMarketValue = 0\n  for(let k = 0; k < prices.length; k++) {\n    totalMarketValue += prices[k].currentMarketPrice\n  }\n\n  const watchlistHTML = () => {\n    return <br/>\n  }\n\n  const loginForm = () => {\n    return (\n      <form onSubmit={handleLogin}>\n        <div>\n          username\n            <input type=\"text\" value={username} name=\"Username\" onChange={({ target }) => setUsername(target.value)}/> \n        </div>  \n        <div>\n          password\n            <input type=\"text\" value={password} name=\"Password\" onChange={({ target }) => setPassword(target.value)}/>\n        </div>    \n        <button type=\"submit\">login</button>\n      </form>\n    )\n  }\n  \n  return (\n    <div align=\"center\">\n      <h1>Current Market Prices</h1>\n        <div>\n          Last updated: {lastUpdated}\n        </div>\n        {user !== null && watchlistHTML()}      \n        <select id=\"set-selector\" name=\"sets\" onChange={(event) => changeGroup(event.target.value)}>\n          {groups.map(group => \n            <option value={group.groupId} key={group.groupId}>\n              {group.groupName}\n            </option>\n          )}\n          <option value={0} key={0}>\n            All cards (slow!)\n          </option>\n        </select>\n      <PriceTable products={prices}/>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}